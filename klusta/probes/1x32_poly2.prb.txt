channel_groups = {
    # Shank index.
    0:
        {
            # List of channels to keep for spike detection.
            'channels': list(range(32)),

            # Adjacency graph. Dead channels will be automatically discarded
            # by considering the corresponding subgraph.
            'graph': [
                (9, 8), (9, 22),
		(9, 23), (22, 8),
		(22, 23), (23, 8),
		(23, 24), (8, 24),
		(8, 7), (24, 7),
		(24, 25), (7, 25),
		(7, 6), (25, 6),
		(25, 26), (6, 26),
		(6, 5), (26, 5),
		(26, 27), (5, 27),
		(5, 4), (27, 4),
		(27, 28), (4, 28),
		(4, 3), (28, 3),
		(28, 29), (3, 29),
		(3, 2), (29, 2),
		(29, 30), (2, 30),
		(2, 1), (30, 1),
		(30, 31), (1, 31),
		(1, 0), (31, 0),
		(31, 21), (0, 21),
		(0, 10), (21, 10),
		(21, 20), (10, 20),
		(10, 11), (20, 11),
		(20, 19), (11, 19),
		(11, 12), (19, 12),
		(19, 18), (12, 18),
		(12, 13), (18, 13),
		(18, 17), (13, 17),
		(13, 14), (17, 14),
		(17, 16), (14, 16),
		(14, 15), (16, 15)
            ],

            # 2D positions of the channels, only for visualization purposes
            # in KlustaViewa. The unit doesn't matter.
            'geometry': {
                31: (10, 65),
		30: (10, 75),
                29: (10, 85),
                28: (10, 95),
                27: (10, 105),
                26: (10, 115),
                25: (10, 125),
                24: (10, 135),
                23: (11, 145),
                22: (10, 155),
                21: (10, 55),
                20: (10, 45),
                19: (10, 350,
                18: (10, 25),
                17: (10, 15),
                16: (10, 5),
                15: (0, 0),
                14: (0, 10),
                13: (0, 20),
                12: (0, 30),
                11: (0, 40),
                10: (0, 50),
                9: (0, 150),
                8: (0, 140),
                7: (0, 130),
                6: (0, 120),
                5: (0, 110),
                4: (0, 100),
                3: (0, 90),
                2: (0, 80),
                1: (0, 70),
                0: (0, 60),
            }
    }
}